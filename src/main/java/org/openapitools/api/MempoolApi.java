/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.3.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.Error;
import org.openapitools.model.MempoolResponse;
import org.openapitools.model.MempoolTransactionRequest;
import org.openapitools.model.MempoolTransactionResponse;
import org.openapitools.model.NetworkRequest;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;

import javax.validation.Valid;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-03-21T15:54:41.273447600+07:00[Asia/Bangkok]")
@Validated
@Tag(name = "mempool", description = "the mempool API")
public interface MempoolApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /mempool : Get All Mempool Transactions
     * Get all Transaction Identifiers in the mempool
     *
     * @param networkRequest  (required)
     * @return Expected response to a valid request (status code 200)
     *         or unexpected error (status code 500)
     */
    @Operation(
        operationId = "mempool",
        summary = "Get All Mempool Transactions",
        description = "Get all Transaction Identifiers in the mempool",
        tags = { "Mempool" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Expected response to a valid request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = MempoolResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/mempool",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<MempoolResponse> mempool(
        @Parameter(name = "NetworkRequest", description = "", required = true) @Valid @RequestBody NetworkRequest networkRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"transaction_identifiers\" : [ { \"hash\" : \"0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f\" }, { \"hash\" : \"0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /mempool/transaction : Get a Mempool Transaction
     * Get a transaction in the mempool by its Transaction Identifier. This is a separate request than fetching a block transaction (/block/transaction) because some blockchain nodes need to know that a transaction query is for something in the mempool instead of a transaction in a block. Transactions may not be fully parsable until they are in a block (ex: may not be possible to determine the fee to pay before a transaction is executed). On this endpoint, it is ok that returned transactions are only estimates of what may actually be included in a block.
     *
     * @param mempoolTransactionRequest  (required)
     * @return Expected response to a valid request (status code 200)
     *         or unexpected error (status code 500)
     */
    @Operation(
        operationId = "mempoolTransaction",
        summary = "Get a Mempool Transaction",
        description = "Get a transaction in the mempool by its Transaction Identifier. This is a separate request than fetching a block transaction (/block/transaction) because some blockchain nodes need to know that a transaction query is for something in the mempool instead of a transaction in a block. Transactions may not be fully parsable until they are in a block (ex: may not be possible to determine the fee to pay before a transaction is executed). On this endpoint, it is ok that returned transactions are only estimates of what may actually be included in a block.",
        tags = { "Mempool" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Expected response to a valid request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = MempoolTransactionResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/mempool/transaction",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<MempoolTransactionResponse> mempoolTransaction(
        @Parameter(name = "MempoolTransactionRequest", description = "", required = true) @Valid @RequestBody MempoolTransactionRequest mempoolTransactionRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"metadata\" : { \"descendant_fees\" : 123923, \"ancestor_count\" : 2 }, \"transaction\" : { \"metadata\" : { \"size\" : 12378, \"lockTime\" : 1582272577 }, \"operations\" : [ { \"amount\" : { \"metadata\" : \"{}\", \"currency\" : { \"symbol\" : \"BTC\", \"metadata\" : \"\", \"decimals\" : 8 }, \"value\" : \"1238089899992\" }, \"metadata\" : { \"depositAmount\" : { \"metadata\" : \"{}\", \"currency\" : { \"symbol\" : \"BTC\", \"metadata\" : \"\", \"decimals\" : 8 }, \"value\" : \"1238089899992\" }, \"tokenBundle\" : [ { \"policyId\" : \"policyId\", \"tokens\" : [ { \"metadata\" : \"{}\", \"currency\" : { \"symbol\" : \"BTC\", \"metadata\" : \"\", \"decimals\" : 8 }, \"value\" : \"1238089899992\" }, { \"metadata\" : \"{}\", \"currency\" : { \"symbol\" : \"BTC\", \"metadata\" : \"\", \"decimals\" : 8 }, \"value\" : \"1238089899992\" } ] }, { \"policyId\" : \"policyId\", \"tokens\" : [ { \"metadata\" : \"{}\", \"currency\" : { \"symbol\" : \"BTC\", \"metadata\" : \"\", \"decimals\" : 8 }, \"value\" : \"1238089899992\" }, { \"metadata\" : \"{}\", \"currency\" : { \"symbol\" : \"BTC\", \"metadata\" : \"\", \"decimals\" : 8 }, \"value\" : \"1238089899992\" } ] } ], \"poolRegistrationParams\" : { \"vrfKeyHash\" : \"vrfKeyHash\", \"margin\" : { \"numerator\" : \"numerator\", \"denominator\" : \"denominator\" }, \"margin_percentage\" : \"margin_percentage\", \"cost\" : \"cost\", \"rewardAddress\" : \"rewardAddress\", \"relays\" : [ { \"ipv4\" : \"127.0.0.1\", \"port\" : \"port\", \"ipv6\" : \"2345:0425:2ca1:0000:0000:0567:5673:23b5\", \"dnsName\" : \"dnsName\", \"type\" : \"type\" }, { \"ipv4\" : \"127.0.0.1\", \"port\" : \"port\", \"ipv6\" : \"2345:0425:2ca1:0000:0000:0567:5673:23b5\", \"dnsName\" : \"dnsName\", \"type\" : \"type\" } ], \"pledge\" : \"pledge\", \"poolMetadata\" : { \"url\" : \"url\", \"hash\" : \"hash\" }, \"poolOwners\" : [ \"poolOwners\", \"poolOwners\" ] }, \"staking_credential\" : { \"hex_bytes\" : \"hex_bytes\" }, \"withdrawalAmount\" : { \"metadata\" : \"{}\", \"currency\" : { \"symbol\" : \"BTC\", \"metadata\" : \"\", \"decimals\" : 8 }, \"value\" : \"1238089899992\" }, \"poolRegistrationCert\" : \"poolRegistrationCert\", \"voteRegistrationMetadata\" : { \"votingKey\" : { \"hex_bytes\" : \"hex_bytes\" }, \"rewardAddress\" : \"rewardAddress\", \"stakeKey\" : { \"hex_bytes\" : \"hex_bytes\" }, \"votingNonce\" : 6.027456183070403, \"votingSignature\" : \"votingSignature\" }, \"epoch\" : 0.8008281904610115, \"pool_key_hash\" : \"pool_key_hash\", \"refundAmount\" : { \"metadata\" : \"{}\", \"currency\" : { \"symbol\" : \"BTC\", \"metadata\" : \"\", \"decimals\" : 8 }, \"value\" : \"1238089899992\" } }, \"related_operations\" : [ { \"index\" : 1 }, { \"index\" : 2 } ], \"type\" : \"Transfer\", \"coin_change\" : { \"coin_identifier\" : { \"identifier\" : \"0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f:1\" } }, \"account\" : { \"metadata\" : { \"chain_code\" : \"chain_code\" }, \"address\" : \"0x3a065000ab4183c6bf581dc1e55a605455fc6d61\", \"sub_account\" : { \"metadata\" : \"{}\", \"address\" : \"0x6b175474e89094c44da98b954eedeac495271d0f\" } }, \"operation_identifier\" : { \"index\" : 5, \"network_index\" : 0 }, \"status\" : \"Reverted\" }, { \"amount\" : { \"metadata\" : \"{}\", \"currency\" : { \"symbol\" : \"BTC\", \"metadata\" : \"\", \"decimals\" : 8 }, \"value\" : \"1238089899992\" }, \"metadata\" : { \"depositAmount\" : { \"metadata\" : \"{}\", \"currency\" : { \"symbol\" : \"BTC\", \"metadata\" : \"\", \"decimals\" : 8 }, \"value\" : \"1238089899992\" }, \"tokenBundle\" : [ { \"policyId\" : \"policyId\", \"tokens\" : [ { \"metadata\" : \"{}\", \"currency\" : { \"symbol\" : \"BTC\", \"metadata\" : \"\", \"decimals\" : 8 }, \"value\" : \"1238089899992\" }, { \"metadata\" : \"{}\", \"currency\" : { \"symbol\" : \"BTC\", \"metadata\" : \"\", \"decimals\" : 8 }, \"value\" : \"1238089899992\" } ] }, { \"policyId\" : \"policyId\", \"tokens\" : [ { \"metadata\" : \"{}\", \"currency\" : { \"symbol\" : \"BTC\", \"metadata\" : \"\", \"decimals\" : 8 }, \"value\" : \"1238089899992\" }, { \"metadata\" : \"{}\", \"currency\" : { \"symbol\" : \"BTC\", \"metadata\" : \"\", \"decimals\" : 8 }, \"value\" : \"1238089899992\" } ] } ], \"poolRegistrationParams\" : { \"vrfKeyHash\" : \"vrfKeyHash\", \"margin\" : { \"numerator\" : \"numerator\", \"denominator\" : \"denominator\" }, \"margin_percentage\" : \"margin_percentage\", \"cost\" : \"cost\", \"rewardAddress\" : \"rewardAddress\", \"relays\" : [ { \"ipv4\" : \"127.0.0.1\", \"port\" : \"port\", \"ipv6\" : \"2345:0425:2ca1:0000:0000:0567:5673:23b5\", \"dnsName\" : \"dnsName\", \"type\" : \"type\" }, { \"ipv4\" : \"127.0.0.1\", \"port\" : \"port\", \"ipv6\" : \"2345:0425:2ca1:0000:0000:0567:5673:23b5\", \"dnsName\" : \"dnsName\", \"type\" : \"type\" } ], \"pledge\" : \"pledge\", \"poolMetadata\" : { \"url\" : \"url\", \"hash\" : \"hash\" }, \"poolOwners\" : [ \"poolOwners\", \"poolOwners\" ] }, \"staking_credential\" : { \"hex_bytes\" : \"hex_bytes\" }, \"withdrawalAmount\" : { \"metadata\" : \"{}\", \"currency\" : { \"symbol\" : \"BTC\", \"metadata\" : \"\", \"decimals\" : 8 }, \"value\" : \"1238089899992\" }, \"poolRegistrationCert\" : \"poolRegistrationCert\", \"voteRegistrationMetadata\" : { \"votingKey\" : { \"hex_bytes\" : \"hex_bytes\" }, \"rewardAddress\" : \"rewardAddress\", \"stakeKey\" : { \"hex_bytes\" : \"hex_bytes\" }, \"votingNonce\" : 6.027456183070403, \"votingSignature\" : \"votingSignature\" }, \"epoch\" : 0.8008281904610115, \"pool_key_hash\" : \"pool_key_hash\", \"refundAmount\" : { \"metadata\" : \"{}\", \"currency\" : { \"symbol\" : \"BTC\", \"metadata\" : \"\", \"decimals\" : 8 }, \"value\" : \"1238089899992\" } }, \"related_operations\" : [ { \"index\" : 1 }, { \"index\" : 2 } ], \"type\" : \"Transfer\", \"coin_change\" : { \"coin_identifier\" : { \"identifier\" : \"0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f:1\" } }, \"account\" : { \"metadata\" : { \"chain_code\" : \"chain_code\" }, \"address\" : \"0x3a065000ab4183c6bf581dc1e55a605455fc6d61\", \"sub_account\" : { \"metadata\" : \"{}\", \"address\" : \"0x6b175474e89094c44da98b954eedeac495271d0f\" } }, \"operation_identifier\" : { \"index\" : 5, \"network_index\" : 0 }, \"status\" : \"Reverted\" } ], \"transaction_identifier\" : { \"hash\" : \"0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f\" }, \"related_transactions\" : [ { \"transaction_identifier\" : { \"hash\" : \"0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f\" }, \"network_identifier\" : { \"blockchain\" : \"bitcoin\", \"sub_network_identifier\" : { \"metadata\" : { \"producer\" : \"0x52bc44d5378309ee2abf1539bf71de1b7d7be3b5\" }, \"network\" : \"shard 1\" }, \"network\" : \"mainnet\" } }, { \"transaction_identifier\" : { \"hash\" : \"0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f\" }, \"network_identifier\" : { \"blockchain\" : \"bitcoin\", \"sub_network_identifier\" : { \"metadata\" : { \"producer\" : \"0x52bc44d5378309ee2abf1539bf71de1b7d7be3b5\" }, \"network\" : \"shard 1\" }, \"network\" : \"mainnet\" } } ] } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
