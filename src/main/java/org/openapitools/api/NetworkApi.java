/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.3.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.Error;
import org.openapitools.model.MetadataRequest;
import org.openapitools.model.NetworkListResponse;
import org.openapitools.model.NetworkOptionsResponse;
import org.openapitools.model.NetworkRequest;
import org.openapitools.model.NetworkStatusResponse;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-03-21T15:54:41.273447600+07:00[Asia/Bangkok]")
@Validated
@Tag(name = "network", description = "the network API")
public interface NetworkApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /network/list : Get List of Available Networks
     * This endpoint returns a list of NetworkIdentifiers that the Rosetta server supports.
     *
     * @param metadataRequest  (required)
     * @return Expected response to a valid request (status code 200)
     *         or unexpected error (status code 500)
     */
    @Operation(
        operationId = "networkList",
        summary = "Get List of Available Networks",
        description = "This endpoint returns a list of NetworkIdentifiers that the Rosetta server supports.",
        tags = { "Network" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Expected response to a valid request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = NetworkListResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/network/list",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<NetworkListResponse> networkList(
        @Parameter(name = "MetadataRequest", description = "", required = true) @Valid @RequestBody MetadataRequest metadataRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"network_identifiers\" : [ { \"blockchain\" : \"bitcoin\", \"sub_network_identifier\" : { \"metadata\" : { \"producer\" : \"0x52bc44d5378309ee2abf1539bf71de1b7d7be3b5\" }, \"network\" : \"shard 1\" }, \"network\" : \"mainnet\" }, { \"blockchain\" : \"bitcoin\", \"sub_network_identifier\" : { \"metadata\" : { \"producer\" : \"0x52bc44d5378309ee2abf1539bf71de1b7d7be3b5\" }, \"network\" : \"shard 1\" }, \"network\" : \"mainnet\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /network/options : Get Network Options
     * This endpoint returns the version information and allowed network-specific types for a NetworkIdentifier. Any NetworkIdentifier returned by /network/list should be accessible here. Because options are retrievable in the context of a NetworkIdentifier, it is possible to define unique options for each network.
     *
     * @param networkRequest  (required)
     * @return Expected response to a valid request (status code 200)
     *         or unexpected error (status code 500)
     */
    @Operation(
        operationId = "networkOptions",
        summary = "Get Network Options",
        description = "This endpoint returns the version information and allowed network-specific types for a NetworkIdentifier. Any NetworkIdentifier returned by /network/list should be accessible here. Because options are retrievable in the context of a NetworkIdentifier, it is possible to define unique options for each network.",
        tags = { "Network" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Expected response to a valid request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = NetworkOptionsResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/network/options",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<NetworkOptionsResponse> networkOptions(
        @Parameter(name = "NetworkRequest", description = "", required = true) @Valid @RequestBody NetworkRequest networkRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"allow\" : { \"balance_exemptions\" : [ { \"sub_account_address\" : \"staking\", \"currency\" : { \"symbol\" : \"BTC\", \"metadata\" : \"\", \"decimals\" : 8 } }, { \"sub_account_address\" : \"staking\", \"currency\" : { \"symbol\" : \"BTC\", \"metadata\" : \"\", \"decimals\" : 8 } } ], \"mempool_coins\" : true, \"operation_types\" : [ \"TRANSFER\", \"TRANSFER\" ], \"historical_balance_lookup\" : true, \"operation_statuses\" : [ { \"status\" : \"SUCCESS\", \"successful\" : true }, { \"status\" : \"SUCCESS\", \"successful\" : true } ], \"timestamp_start_index\" : 0, \"call_methods\" : [ \"eth_call\", \"eth_call\" ], \"errors\" : [ { \"retriable\" : true, \"code\" : 12, \"description\" : \"This error is returned when the requested AccountIdentifier is improperly formatted.\", \"details\" : { \"address\" : \"0x1dcc4de8dec75d7aab85b567b6\", \"error\" : \"not base64\" }, \"message\" : \"Invalid account format\" }, { \"retriable\" : true, \"code\" : 12, \"description\" : \"This error is returned when the requested AccountIdentifier is improperly formatted.\", \"details\" : { \"address\" : \"0x1dcc4de8dec75d7aab85b567b6\", \"error\" : \"not base64\" }, \"message\" : \"Invalid account format\" } ] }, \"version\" : { \"metadata\" : \"{}\", \"rosetta_version\" : \"1.2.5\", \"node_version\" : \"1.0.2\", \"middleware_version\" : \"0.2.7\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /network/status : Get Network Status
     * This endpoint returns the current status of the network requested. Any NetworkIdentifier returned by /network/list should be accessible here.
     *
     * @param networkRequest  (required)
     * @return Expected response to a valid request (status code 200)
     *         or unexpected error (status code 500)
     */
    @Operation(
        operationId = "networkStatus",
        summary = "Get Network Status",
        description = "This endpoint returns the current status of the network requested. Any NetworkIdentifier returned by /network/list should be accessible here.",
        tags = { "Network" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Expected response to a valid request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = NetworkStatusResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/network/status",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<NetworkStatusResponse> networkStatus(
        @Parameter(name = "NetworkRequest", description = "", required = true) @Valid @RequestBody NetworkRequest networkRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"oldest_block_identifier\" : { \"index\" : 1123941, \"hash\" : \"0x1f2cc6c5027d2f201a5453ad1119574d2aed23a392654742ac3c78783c071f85\" }, \"current_block_identifier\" : { \"index\" : 1123941, \"hash\" : \"0x1f2cc6c5027d2f201a5453ad1119574d2aed23a392654742ac3c78783c071f85\" }, \"peers\" : [ { \"metadata\" : \"{}\", \"peer_id\" : \"0x52bc44d5378309ee2abf1539bf71de1b7d7be3b5\" }, { \"metadata\" : \"{}\", \"peer_id\" : \"0x52bc44d5378309ee2abf1539bf71de1b7d7be3b5\" } ], \"sync_status\" : { \"target_index\" : 150, \"synced\" : true, \"stage\" : \"header sync\", \"current_index\" : 100 }, \"current_block_timestamp\" : 1582833600000, \"genesis_block_identifier\" : { \"index\" : 1123941, \"hash\" : \"0x1f2cc6c5027d2f201a5453ad1119574d2aed23a392654742ac3c78783c071f85\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
